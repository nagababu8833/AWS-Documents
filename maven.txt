Scm:github, bitbucket, gitlab, aws code commit 
build: preparing an executable file/Artificate(.war, .jar, .ear) :app-v1.jar, app-v2.jar


build tolls : Ant, Maven, Ms Build, Gradle
ci/cd tolls : jenkins, gitlab ci/cd


Three types of repository are there:
=====================================
1. local repository :  default path c:/user/.m2
2. central repository :stored in web
3. remote repository : third party websites


   pom : which contain dependences  , to add any type of depedences




ant: build the code
maven: build the code + folder creation

java:
----------
jre(Java runtime eneviroment)
jdk(Java development kit)


folders:
===================
pom.xml(project object model) : It is a file containg all configuration details about project assembley

artificate : executable jar/war/ear file 

/target - folder , where is stored an executable file , compliled classes , test reports


C:\Users\HP\.m2\repository -------------> mvn install



1.modules
2.depedendances


maven lifecycle :
==================
1.validate
2.generate-sources
3.process-sources
4.generate-resources
5.process-resources
6.compile



Maven Phase:
==========================================================
Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

1.validate: validate the project is correct and all necessary information is available
2.compile: compile the source code of the project
3.test: test the compiled source code using a suitable unit testing framework. These tests should 
        not require the code be packaged or deployed
4.package: take the compiled code and package it in its distributable format, such as a JAR.
           integration-test: process and deploy the package if necessary into an environment where integration tests can be run
5.verify: run any checks to verify the package is valid and meets quality criteria
          install: install the package into the local repository, for use as a dependency in other projects locally
6.deploy: done in an integration or release environment, copies the final package to the remote repository for sharing
          with other developers and projects.
         There are two other Maven lifecycles of note beyond the default list above. They are

7.clean: cleans up artifacts created by prior builds
8.site: generates site documentation for this project
        Phases are actually mapped to underlying goals. The specific goals executed per phase is dependant upon the packaging type of the project. 
        For example, package executes jar:jar if the project type is a JAR, and war:war if the project type is - you guessed it - a WAR.

        An interesting thing to note is that phases and goals may be executed in sequence.



----------------------------------------------------------------------- Day 2 --------------------------------------------------------

Maven:
-------
Fold structure creation and build the code

compiler: source code (java, python....) need to convert to binarycode(0,1)
Build: preparing an executable file(artificat)

mvn clean 
mvn clean install
mvn clean install package


life cycle:
-----------


